# S2OPC OPC UA Library

# Copyright (c) 2016 Intel Corporation
# SPDX-License-Identifier: Apache-2.0

menuconfig S2OPC
	bool "S2OPC Support"
	help
	  This option enables the S2OPC library.

#if S2OPC
#
#choice
#	prompt "Select implementation"
#	default MBEDTLS_BUILTIN
#
#config MBEDTLS_BUILTIN
#	bool "Enable mbedTLS integrated sources"
#	help
#	  Link with local mbedTLS sources instead of external library.
#
#config MBEDTLS_LIBRARY
#	bool "Enable mbedTLS external library"
#	help
#	  This option enables mbedTLS library.
#
#endchoice
#
#config MBEDTLS_CFG_FILE
#	string "mbed TLS configuration file"
#	depends on MBEDTLS_BUILTIN
#	default "config-tls-generic.h"
#	help
#	  Use a specific mbed TLS configuration file. The default config file
#	  file can be tweaked with Kconfig. The default configuration is
#	  suitable to communicate with majority of HTTPS servers on the Internet,
#	  but has relatively many features enabled. To optimize resources for
#	  special TLS usage, use available Kconfig options, or select an
#	  alternative config.
#
#rsource "Kconfig.tls-generic"
#
#config MBEDTLS_SSL_MAX_CONTENT_LEN
#	int "Max payload size for TLS protocol message"
#	default 1500
#	depends on MBEDTLS_BUILTIN
#	help
#	  The TLS standards mandate max payload size of 16384 bytes. So, for
#	  maximum operability and for general-purpose usage, that value must
#	  be used. For specific usages, that value can be largely decreased.
#	  E.g. for DTLS, payload size is limited by UDP datagram size, and
#	  even for HTTPS REST API, the payload can be limited to max size of
#	  (REST request, REST response, server certificate(s)).
#	  mbedTLS uses this value separate for input and output buffers, so
#	  twice this value will be allocated (on mbedTLS own heap, so the
#	  value of MBEDTLS_HEAP_SIZE should accommodate that).
#
#config MBEDTLS_DEBUG
#	bool "mbed TLS debug activation"
#	depends on MBEDTLS_BUILTIN
#	help
#	  Enable debugging activation for mbed TLS configuration. If you use
#	  mbedTLS/Zephyr integration (e.g. net_app), this will activate debug
#	  logging (of the level configured by MBEDTLS_DEBUG_LEVEL).
#	  If you use mbedTLS directly instead, you will need to perform
#	  additional configuration yourself: call
#	  mbedtls_ssl_conf_dbg(&mbedtls.conf, my_debug, NULL);
#	  mbedtls_debug_set_threshold(level);
#	  functions in your application, and create the my_debug() function to
#	  actually print something useful.
#
#endif # S2OPC
