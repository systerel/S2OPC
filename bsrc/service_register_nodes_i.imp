/*
 * Licensed to Systerel under one or more contributor license
 * agreements. See the NOTICE file distributed with this work
 * for additional information regarding copyright ownership.
 * Systerel licenses this file to you under the Apache
 * License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain
 * a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

IMPLEMENTATION
    service_register_nodes_i

REFINES
    service_register_nodes

SEES
    constants,
    constants_statuscodes_bs,
    message_in_bs,
    message_out_bs

IMPORTS
    msg_register_nodes,
    register_nodes_it

LOCAL_OPERATIONS

    p_bres <-- fill_response_register_nodes (p_req_msg, p_resp_msg, p_nb_nodes) =
    PRE
        p_req_msg : t_msg_i &
        p_req_msg : t_msg &
        p_req_msg = c_msg_in &
        a_msg_in_type = e_msg_view_register_nodes_req &
        p_resp_msg : t_msg_i &
        p_resp_msg : t_msg &
        p_resp_msg = c_msg_out &
        a_msg_out_type = e_msg_view_register_nodes_resp &
        p_nb_nodes : NAT &
        p_nb_nodes : t_registerNodesReqIndex &
        p_nb_nodes = nb_nodes &
        RegisterNodesResp_Allocated = TRUE &
        RegisterNodesReq_NodeId : 1..nb_nodes --> t_NodeId
    THEN
        CHOICE
          p_bres := FALSE ||
          RegisterNodesResp_NodeId :(RegisterNodesResp_NodeId : t_registerNodesReqIndex +-> t_NodeId)
        OR
          p_bres := TRUE ||
          RegisterNodesResp_NodeId :(RegisterNodesResp_NodeId = %ni.(ni : 1..nb_nodes | RegisterNodesReq_NodeId(ni)))
        END
    END

OPERATIONS

    p_bres <-- fill_response_register_nodes (p_req_msg, p_resp_msg, p_nb_nodes) =
    VAR
        l_continue,
        l_index,
        l_node_id,
        l_ok
    IN
        l_continue <-- init_iter_register_nodes_request(p_nb_nodes);
        l_ok := TRUE;
        l_index := 0;
        l_node_id := c_NodeId_indet;
        WHILE l_continue = TRUE & l_ok = TRUE DO
            l_continue, l_index <-- continue_iter_register_nodes_request;
            l_node_id <-- get_msg_register_nodes_req_node_id(p_req_msg, l_index);
            l_ok <-- setall_msg_register_nodes_resp_node_id(p_resp_msg, l_index, l_node_id)
        INVARIANT
            l_continue = bool(rreqs_to_iterate /= {}) &
            rreqs_to_iterate /\ rreqs_iterated = {} &
            rreqs_to_iterate \/ rreqs_iterated = 1..p_nb_nodes &
            (!ni.(ni : 1..l_index => RegisterNodesReq_NodeId(ni) = RegisterNodesReq_NodeId(ni)))
        VARIANT
            card(rreqs_to_iterate)
        END;

        p_bres := l_ok
    END
    ;

    ret <-- treat_register_nodes_request (p_req_msg, p_resp_msg) =
    VAR
        l_sc,
        l_nb_nodes,
        l_bres
    IN
        l_bres := FALSE;
        l_sc, l_nb_nodes <-- getall_msg_register_nodes_req_nb_nodes (p_req_msg);
        IF l_sc = e_sc_ok
        THEN
            l_bres <-- alloc_msg_register_nodes_resp_results (p_resp_msg, l_nb_nodes);
            IF l_bres = TRUE
            THEN
                l_bres <-- fill_response_register_nodes (p_req_msg, p_resp_msg, l_nb_nodes);
                IF l_bres = TRUE
                THEN
                    ret := e_sc_ok
                ELSE
                    ret := e_sc_bad_unexpected_error
                END
            ELSE
                ret := e_sc_bad_out_of_memory
            END
        ELSE
            ret := l_sc
        END
    END
END
