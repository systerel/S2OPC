/*
 * Licensed to Systerel under one or more contributor license
 * agreements. See the NOTICE file distributed with this work
 * for additional information regarding copyright ownership.
 * Systerel licenses this file to you under the Apache
 * License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain
 * a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

IMPLEMENTATION
    session_core_1_i

REFINES
    session_core_1

SEES
    constants,
    constants_statuscodes_bs,
    request_handle_bs,
    message_out_bs,
    message_in_bs,
    channel_mgr

IMPORTS
    session_core_1_it,
    session_core_2,
    session_core_bs

PROMOTES
    server_get_session_from_token,
    client_get_token_from_session,
    server_get_fresh_session_token,
    server_is_valid_session_token,
    client_set_session_token,
    reset_session_to_create,
    is_valid_session,
    get_session_state,
    set_session_channel,
    getall_session_channel,
    get_session_channel,
    getall_to_create,
    getall_orphaned,
    set_session_to_create,
    drop_user_server,
    set_session_user_server,
    set_session_user_client,
    get_session_user_server,
    get_session_user_client,
    is_same_user_server,
    server_create_session_req_do_crypto,
    client_activate_session_req_do_crypto,
    clear_Signature,
    get_NonceServer,
    client_create_session_req_do_crypto,
    get_NonceClient,
    drop_NonceClient,
    client_create_session_check_crypto,
    server_activate_session_check_crypto,
    client_activate_session_resp_check,
    client_close_session_req_msg,
    client_close_session_resp_msg,
    server_close_session_check_req,
    session_do_nothing,
    set_session_app_context,
    client_gen_create_session_internal_event,
    client_gen_activate_orphaned_session_internal_event,
    client_gen_activate_user_session_internal_event,
    server_session_timeout_start_timer,
    server_session_timeout_evaluation,
    server_session_timeout_msg_received

LOCAL_OPERATIONS

    l_set_session_state(p_session, p_state, is_client) =
    PRE
        p_session : t_session_i    &
        p_session : dom(a_state)   &
        p_state   : t_sessionState &
        p_state  /= e_session_closed &
        p_state /= e_session_init &
        is_client : BOOL
    THEN
        a_state(p_session) := p_state
    END

OPERATIONS

    /* Local operations */

    l_set_session_state(p_session, p_state, is_client) =
    VAR
        l_prec_state
    IN
        l_prec_state <-- get_session_state(p_session);
        set_session_state_1(p_session, p_state);
        notify_set_session_state(p_session, l_prec_state, p_state, c_StatusCode_indet, is_client)
    END
    ;


    /* Global operations */

    p_session <-- init_new_session (is_client) =
    VAR
        l_is_session,
        l_continue
    IN
        p_session := c_session_indet;
        l_is_session := TRUE;
        l_continue <-- init_iter_session;
        IF  l_continue = TRUE  /* Only for the proof */
        THEN
            WHILE
                l_continue   = TRUE &
                l_is_session = TRUE
            DO
                l_continue, p_session <-- continue_iter_session;
                l_is_session <-- is_valid_session(p_session)
            INVARIANT
                l_continue = bool(sessions_to_iterate /= {}) &
                sessions_to_iterate /\ sessions_iterated = {} &
                sessions_to_iterate \/ sessions_iterated = t_session &
                (   l_is_session = TRUE
                    =>
                    sessions_iterated <: s_session) &
                (   l_is_session = FALSE
                    =>
                    p_session  : t_session &
                    p_session /: s_session)
            VARIANT
                card(sessions_to_iterate)
            END
        END;
        IF  l_is_session = TRUE THEN
            p_session := c_session_indet
        ELSE
            add_session(p_session, e_session_init);
            notify_set_session_state(p_session, e_session_closed, e_session_init, c_StatusCode_indet, is_client)
        END
    END
    ;

    create_session (session, channel, state, is_client) =
    BEGIN
        set_session_channel(session, channel);
        l_set_session_state(session, state, is_client)
    END
    ;

    set_session_state (session, state, is_client) =
    BEGIN
        l_set_session_state (session, state, is_client)
    END
    ;

    set_session_state_closed (session, sc_reason, is_client) =
    VAR
        l_prec_state,
        l_user
    IN
        /* First notify of state change to have access to data before removing all session data */
        l_prec_state <-- get_session_state(session);
        l_user <-- get_session_user_server(session);
        notify_set_session_state(session, l_prec_state, e_session_closed, sc_reason, is_client);

        reset_session_channel(session);
        // a_channel

        delete_session_token(session);
        // a_user_server
        // a_user_client
        // a_server_token
        // a_client_token
        reset_session_to_create(session);
        // a_client_to_create
        delete_session_application_context(session);
        // a_client_app_context
        reset_session_orphaned(session);
        // a_client_orphaned
        drop_NonceClient(session);
        // a_NonceClient
        remove_NonceServer(session);
        // a_NonceServer
        remove_session(session);
        // s_session
        // a_state

        IF is_client = FALSE
        THEN
            server_session_timeout_stop_timer(session);
            drop_user_server(session)
        END
    END
    ;

    set_session_orphaned (session, channel_config_idx) =
    VAR
        l_bool
    IN
        reset_session_channel(session);
        l_bool <-- is_t_channel_config_idx(channel_config_idx);
        IF  l_bool = TRUE THEN
            set_session_orphaned_1(session, channel_config_idx)
        END
    END

END
