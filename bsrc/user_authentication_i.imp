/*
 * Licensed to Systerel under one or more contributor license
 * agreements. See the NOTICE file distributed with this work
 * for additional information regarding copyright ownership.
 * Systerel licenses this file to you under the Apache
 * License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain
 * a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

IMPLEMENTATION
    user_authentication_i

REFINES
    user_authentication

SEES
    constants,
    constants_statuscodes_bs

IMPORTS
    user_authentication_bs

PROMOTES
    deallocate_user,
    get_local_user,
    has_user_token_policy_available,
    get_user_token_type_from_token

LOCAL_OPERATIONS

    p_sc_allocated_valid_user, p_user <-- allocate_user_if_authenticated (p_endpoint_config_idx, p_user_token, p_sc_valid_user) =
    PRE
        p_user_token : t_user_token_i &
        p_user_token : t_user_token &
        p_endpoint_config_idx : t_endpoint_config_idx_i &
        p_endpoint_config_idx : t_endpoint_config_idx &
        p_sc_valid_user : t_StatusCode_i &
        p_sc_valid_user : t_StatusCode
    THEN
        IF p_sc_valid_user = e_sc_ok
        THEN
            CHOICE
                p_sc_allocated_valid_user := p_sc_valid_user ||
                p_user :(p_user : t_user_i & p_user : t_user)
            OR
                p_sc_allocated_valid_user := e_sc_bad_out_of_memory ||
                p_user := c_user_indet
            END
        ELSE
            p_sc_allocated_valid_user := p_sc_valid_user ||
            p_user := c_user_indet
        END
    END

OPERATIONS

    p_sc_allocated_valid_user, p_user <-- allocate_user_if_authenticated (p_endpoint_config_idx, p_user_token, p_sc_valid_user) =
    VAR
        l_is_user_allocated
    IN
        IF p_sc_valid_user = e_sc_ok
        THEN
            l_is_user_allocated, p_user <-- allocate_authenticated_user (p_endpoint_config_idx, p_user_token);
            IF l_is_user_allocated = TRUE
            THEN
                p_sc_allocated_valid_user := p_sc_valid_user
            ELSE
                p_user := c_user_indet;
                p_sc_allocated_valid_user := e_sc_bad_out_of_memory
            END
        ELSE
            p_sc_allocated_valid_user := p_sc_valid_user;
            p_user := c_user_indet
        END
    END
    ;

    /* END OF LOCAL OPERATIONS */

    p_valid, p_user_token_encrypted <-- may_encrypt_user_token(p_channel_config_idx, p_user_server_cert, p_server_nonce, p_user_secu_policy, p_user_token) =
    VAR
        l_user_token_type
    IN
        l_user_token_type <-- get_user_token_type_from_token (p_user_token);
        IF l_user_token_type = e_userTokenType_anonymous or l_user_token_type = e_userTokenType_x509 THEN
            p_valid, p_user_token_encrypted <-- shallow_copy_user_token(l_user_token_type, p_user_token)
        ELSIF l_user_token_type = e_userTokenType_userName THEN
                p_valid, p_user_token_encrypted <-- encrypt_user_token(p_channel_config_idx, p_user_server_cert, p_server_nonce, p_user_secu_policy, l_user_token_type, p_user_token)
        ELSE
            /* Unsupported user token type */
            p_user_token_encrypted := c_user_token_indet;
            p_valid := FALSE
        END
    END
    ;

    p_sc_valid_user, p_user <-- allocate_valid_and_authenticated_user (p_user_token, p_server_nonce, p_channel_config_idx, p_endpoint_config_idx, p_user_token_signature) =
    VAR
        l_user_token_type,
        l_is_supported_user_token_type,
        l_sc_user_authentication,
        l_used_security_policy,
        l_is_valid_user_token,
        l_decrypted_user_token
    IN
        l_user_token_type <-- get_user_token_type_from_token (p_user_token);
        l_is_supported_user_token_type, l_used_security_policy <-- is_user_token_supported (l_user_token_type, p_user_token, p_channel_config_idx, p_endpoint_config_idx);
        IF l_is_supported_user_token_type = TRUE
        THEN
            IF l_user_token_type = e_userTokenType_userName THEN
                l_is_valid_user_token, l_decrypted_user_token <-- decrypt_user_token(p_endpoint_config_idx, p_server_nonce, l_used_security_policy, l_user_token_type, p_user_token);
                IF l_is_valid_user_token = TRUE THEN
                    l_sc_user_authentication <-- is_valid_username_pwd_authentication (p_endpoint_config_idx, l_user_token_type, l_decrypted_user_token)
                ELSE
                    l_sc_user_authentication := e_sc_bad_identity_token_invalid
                END
            ELSIF l_user_token_type = e_userTokenType_x509 THEN
                l_sc_user_authentication <-- is_valid_user_x509_authentication (p_endpoint_config_idx, l_user_token_type, p_user_token, p_user_token_signature, p_server_nonce, l_used_security_policy)
            ELSIF l_user_token_type = e_userTokenType_anonymous THEN
                /* It is not necessary to authenticate Anonymous user */
                l_sc_user_authentication := e_sc_ok
            ELSE
                /* Unexpected TokenType */
                l_sc_user_authentication := e_sc_bad_identity_token_invalid
            END;
            p_sc_valid_user, p_user <-- allocate_user_if_authenticated (p_endpoint_config_idx, p_user_token, l_sc_user_authentication)
        ELSE
            p_user := c_user_indet;
            p_sc_valid_user := e_sc_bad_identity_token_invalid
        END
    END

END
