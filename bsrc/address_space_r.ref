/*
 * Licensed to Systerel under one or more contributor license
 * agreements. See the NOTICE file distributed with this work
 * for additional information regarding copyright ownership.
 * Systerel licenses this file to you under the Apache
 * License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain
 * a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

REFINEMENT
    address_space_r
REFINES
    address_space

SEES
    constants,
    service_write_decode_bs

EXTENDS
    data_value_pointer_bs

DEFINITIONS
    d_variables ==
        a_NodeId,
        a_NodeClass,
        a_BrowseName,
        a_DisplayName,
        a_Value,
        a_Value_StatusCode,
        a_Value_SourceTimestamp,
        a_Value_ServerTimestamp,
        a_IsAbstract,
        a_EventNotifier,
        a_DataType,
        a_ValueRank,
        a_AccessLevel,
        a_UserAccessLevel,
        a_Historizing,
        a_Executable,
        a_UserExecutable,
        a_ContainsNoLoops,
        a_Symmetric,

        Ref_HasTypeDefinition,

        Reference_SourceNode,
        Reference_ReferenceType,
        Reference_TargetNode,
        Reference_IsForward,

        Node_Reference,
        Node_RefIndexEnd,
        RefIndex_Reference,

        IsValid_VariantIndex,
        HasRange_VariantIndex,

        /* Service Write */
        ResponseWrite_allocated,
        ResponseWrite_StatusCode,

        /* User authorization */
        s_AuthorizedOperations
    ;

    d_inv ==
        /* Attributes */
        a_NodeId      : t_Node >-> t_NodeId        &
        a_NodeClass   : t_Node --> t_NodeClass     &
        a_BrowseName  : t_Node --> t_QualifiedName &
        a_DisplayName : t_Node --> t_LocalizedText &

        a_Value : t_Node +-> t_Variant &
        dom(a_NodeClass|>{e_ncl_Variable}) <: dom(a_Value) &
        dom(a_Value) <: dom(a_NodeClass|>{e_ncl_Variable, e_ncl_VariableType}) &

        /* + Value attribute meta-data */
        a_Value_StatusCode : t_Node +-> t_StatusCode &
        dom(a_Value_StatusCode) = dom(a_NodeClass|>{e_ncl_Variable}) &
        a_Value_SourceTimestamp : t_Node +-> t_DateTime &
        dom(a_Value_SourceTimestamp) = dom(a_NodeClass|>{e_ncl_Variable}) &
        a_Value_ServerTimestamp : t_Node +-> t_DateTime &
        dom(a_Value_ServerTimestamp) = dom(a_NodeClass|>{e_ncl_Variable}) &

        a_IsAbstract : t_Node +-> BOOL &
        dom(a_IsAbstract) = dom(a_NodeClass|>{e_ncl_ObjectType, e_ncl_VariableType, e_ncl_ReferenceType, e_ncl_DataType}) &

        a_EventNotifier : t_Node +-> BOOL &
        dom(a_EventNotifier) = dom(a_NodeClass|>{e_ncl_Object, e_ncl_View}) &

        a_DataType : t_Node +-> t_NodeId &
        dom(a_DataType) = dom(a_NodeClass|>{e_ncl_Variable, e_ncl_VariableType}) &

        a_ValueRank : t_Node +-> t_Int32 &
        dom(a_ValueRank) = dom(a_NodeClass|>{e_ncl_Variable, e_ncl_VariableType}) &

        a_AccessLevel : t_Node +-> t_access_level &
        dom(a_AccessLevel) = dom(a_NodeClass|>{e_ncl_Variable}) &

        a_UserAccessLevel : t_Node +-> t_access_level &
        dom(a_UserAccessLevel) = dom(a_NodeClass|>{e_ncl_Variable}) & /* Dynamic value evaluation depending on authorization of user */

        a_Historizing : t_Node +-> BOOL &
        dom(a_Historizing) = dom(a_NodeClass|>{e_ncl_Variable}) &

        a_Executable : t_Node +-> BOOL &
        dom(a_Executable) = dom(a_NodeClass|>{e_ncl_Method}) &

        a_UserExecutable : t_Node +-> BOOL &
        dom(a_UserExecutable) = dom(a_NodeClass|>{e_ncl_Method}) &

        a_ContainsNoLoops : t_Node +-> BOOL &
        dom(a_ContainsNoLoops) = dom(a_NodeClass|>{e_ncl_View}) &

        a_Symmetric : t_Node +-> BOOL &
        dom(a_Symmetric) = dom(a_NodeClass|>{e_ncl_ReferenceType}) &

        Ref_HasTypeDefinition : t_Node +-> t_ExpandedNodeId &
        dom(Ref_HasTypeDefinition) = dom(a_NodeClass |> {e_ncl_Variable, e_ncl_Object}) &

        /* References */
        Reference_SourceNode    : t_Reference --> t_NodeId         &
        Reference_ReferenceType : t_Reference --> t_NodeId         &
        Reference_TargetNode    : t_Reference --> t_ExpandedNodeId &
        Reference_IsForward     : t_Reference --> BOOL             &

        Node_Reference          : t_Node     <-> t_Reference &
        Node_RefIndexEnd        : t_Node     --> t_RefIndex  &
        RefIndex_Reference      : t_Node * t_RefIndex --> t_Reference &

        IsValid_VariantIndex : t_Variant * t_IndexRange_i --> BOOL &
        HasRange_VariantIndex  : t_Variant * t_IndexRange_i --> BOOL &

        /* Service Write */
        ResponseWrite_allocated : BOOL &
        ResponseWrite_StatusCode : t_WriteValue +-> t_StatusCode &

        /* User authorization */
        s_AuthorizedOperations <: t_operation_type * t_NodeId * t_AttributeId * t_user
    ;

    d_init ==
        d_inv &
        ResponseWrite_allocated = FALSE &
        ResponseWrite_StatusCode = {}
    ;

    /* Relation associating to a node a value which is requested to be written
       in the address space */
    d_a_DataValue_requested ==
        (a_NodeClass~[{e_ncl_Variable}]           <| a_NodeId ;
                                                     WriteValue_NodeId~ ;
         (cast_t_WriteValue[1..nb_WriteValue] /\
          WriteValue_AttributeId~[{e_aid_Value}]) <| WriteValue_DataValue)

ABSTRACT_VARIABLES
    d_variables

INITIALISATION
    d_variables :( d_init )

OPERATIONS

    /* --------------------------------------------------------------------- */
    /* Service Write */

    StatusCode_service <-- treat_write_request_WriteValues (p_user) =
    PRE
        p_user : t_user_i &
        p_user : t_user
    THEN
        StatusCode_service := e_sc_ok ||
        a_Value,
        a_Value_StatusCode,
        a_Value_SourceTimestamp,
        a_Value_ServerTimestamp,
        ResponseWrite_StatusCode
        :(  ResponseWrite_StatusCode : t_WriteValue +-> t_StatusCode &

            /* For a given node, the write request message may provide different values to be written
               as the value attribute of this node. In this case, the written value is chosen among
               possible values. */

            /* At most one value should be written for each node */
            a_Value : t_Node +-> t_Variant &

            /* The value requested to be written should be contained in the requested values */
            a_Value <: a_Value$0 <+ (d_a_DataValue_requested;DataValue_Variant) &

            /* Same for meta-attributes */
            a_Value_StatusCode <: a_Value_StatusCode$0 <+ (d_a_DataValue_requested;DataValue_StatusCode) &
            a_Value_SourceTimestamp <: a_Value_SourceTimestamp$0 <+ (d_a_DataValue_requested;DataValue_SourceTimestamp) &
            a_Value_ServerTimestamp <: a_Value_ServerTimestamp$0 <+ (d_a_DataValue_requested;DataValue_ServerTimestamp) &


            ResponseWrite_StatusCode = %wvi.(
                wvi : t_WriteValue &
                wvi : cast_t_WriteValue[1..nb_WriteValue]
                /* TODO: out_of_memory handling */
                |
                {FALSE |-> e_sc_bad_attribute_id_invalid,
                 TRUE  |-> {FALSE |-> e_sc_bad_node_id_unknown,
                            TRUE  |-> {FALSE |-> e_sc_bad_not_writable, /* when attribute is invalid for given node class, should return attribute invalid*/
                                       TRUE  |-> {FALSE |-> e_sc_bad_user_access_denied,
                                                  TRUE |-> {FALSE |-> e_sc_bad_index_range_invalid,
                                                            TRUE |-> {FALSE |-> e_sc_bad_index_range_no_data,
                                                                      TRUE |-> e_sc_ok
                                                                      }(HasRange_VariantIndex(
                                                                         DataValue_Variant(
                                                                          WriteValue_DataValue(wvi)) |-> WriteValue_IndexRange(wvi)))
                                                           }(IsValid_VariantIndex(
                                                              DataValue_Variant(
                                                               WriteValue_DataValue(wvi)) |-> WriteValue_IndexRange(wvi)))
                                                 }(bool(e_operation_type_write |-> WriteValue_NodeId(wvi) |-> WriteValue_AttributeId(wvi) |-> p_user : s_AuthorizedOperations))
                                      }(bool(WriteValue_AttributeId(wvi) = e_aid_Value &
                                             a_NodeClass(a_NodeId~(WriteValue_NodeId(wvi))) = e_ncl_Variable & /* writemask not managed => only var/value writable */
                                             conv_AccessLevel_CurrentWrite(a_AccessLevel(a_NodeId~(WriteValue_NodeId(wvi)))) = TRUE))
                           }(bool(WriteValue_NodeId(wvi) : ran(a_NodeId)))
                }(bool(WriteValue_AttributeId(wvi) : t_AttributeId))
            )
        )
    END
    ;

    bret <-- alloc_write_request_responses(nb_req) =
    BEGIN
        IF nb_req <= k_n_WriteResponse_max THEN
            bret,
            ResponseWrite_StatusCode,
            ResponseWrite_allocated
            :(
                bret : BOOL &
                ResponseWrite_allocated  : BOOL                          &
                ResponseWrite_StatusCode : t_WriteValue +-> t_StatusCode &
                (ResponseWrite_allocated = TRUE
                 =>
                 ResponseWrite_StatusCode = cast_t_WriteValue[1..nb_req] * {e_sc_bad_internal_error}) &
                (ResponseWrite_allocated = FALSE
                 =>
                 ResponseWrite_StatusCode = {}) &
                bret = ResponseWrite_allocated
            )
        ELSE
            ResponseWrite_allocated := FALSE ||
            bret := FALSE
        END
    END

END
