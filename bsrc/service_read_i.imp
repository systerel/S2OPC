/*
 * Licensed to Systerel under one or more contributor license
 * agreements. See the NOTICE file distributed with this work
 * for additional information regarding copyright ownership.
 * Systerel licenses this file to you under the Apache
 * License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain
 * a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

IMPLEMENTATION
    service_read_i

REFINES
    service_read_r

DEFINITIONS
    "definitions.def"

SEES
    constants,
    constants_statuscodes_bs,
    address_space,
    message_in_bs,
    message_out_bs

IMPORTS
    msg_read_request,
    msg_read_response_bs,
    service_read_it

PROMOTES
    check_ReadRequest,
    alloc_read_response

LOCAL_OPERATIONS

    fill_read_response_1(p_user, p_resp_msg, p_sc, p_nid, p_aid, p_index_range, p_rvi) =
    PRE
        p_user     : t_user_i &
        p_user     : t_user   &
        p_resp_msg : t_msg_i         &
        p_sc       : t_StatusCode_i &
        p_sc       : t_StatusCode &
        p_nid      : t_NodeId_i      &
        p_aid      : t_AttributeId_i &
        p_index_range : t_IndexRange_i &
        p_rvi      : t_ReadValue_i
    THEN
        data_Value_Value,
        data_Value_StatusCode
        :(data_Value_Value      : t_ReadValue +-> t_Variant    &
          data_Value_StatusCode : t_ReadValue +-> t_RawStatusCode &

          (p_sc = e_sc_ok &
           p_nid : dom(a_NodeId~)
           =>
           data_Value_Value = data_Value_Value$0 <+
                              {p_rvi |-> AttributeID_Node_Variant(p_aid)(a_NodeId~(p_nid))} &
           (a_NodeClass(a_NodeId~(p_nid)) = e_ncl_Variable
            =>
            data_Value_StatusCode = data_Value_StatusCode$0 <+
                                    {p_rvi |-> a_Value_StatusCode(a_NodeId~(p_nid))}) &
            /* TODO: model e_sc_bad_user_access_level */
           (not(a_NodeClass(a_NodeId~(p_nid)) = e_ncl_Variable)
            =>
            data_Value_StatusCode = data_Value_StatusCode$0 <+
                                    {p_rvi |-> conv_StatusCode_To_RawStatusCode(e_sc_ok)})) &
          (not(p_sc = e_sc_ok &
               p_nid : dom(a_NodeId~))
           =>
           data_Value_Value = {p_rvi} <<| data_Value_Value$0 &
           data_Value_StatusCode = data_Value_StatusCode$0 <+
                                   {p_rvi |-> conv_StatusCode_To_RawStatusCode(e_sc_bad_internal_error)})
         )
    END

OPERATIONS

    fill_read_response_1(p_user, p_resp_msg, p_sc, p_nid, p_aid, p_index_range, p_rvi) =
    VAR
        l_is_valid,
        l_node,
        l_ncl,
        l_value,
        l_sc,
        l_raw_sc,
        l_authorized
    IN
        IF  p_sc = e_sc_ok
        THEN
            l_is_valid, l_node <-- readall_AddressSpace_Node(p_nid);
            IF l_is_valid = TRUE THEN
                l_authorized <-- get_user_authorization(e_operation_type_read, p_nid, p_aid, p_user);
                IF l_authorized = TRUE THEN
                    l_sc, l_ncl, l_value <-- read_NodeClass_Attribute(p_user, l_node, p_aid, p_index_range);
                    IF l_sc = e_sc_ok THEN
                        IF  p_aid = e_aid_Value &
                            l_ncl = e_ncl_Variable
                        THEN
                            l_raw_sc <-- get_Value_StatusCode(p_user, l_node)
                        ELSE
                            l_raw_sc <-- getall_conv_StatusCode_To_RawStatusCode(e_sc_ok)
                        END
                    ELSE
                        l_raw_sc <-- getall_conv_StatusCode_To_RawStatusCode(l_sc)
                    END;
                    set_read_response(p_resp_msg, p_rvi, l_value, l_raw_sc, p_aid);
                    read_AddressSpace_free_variant(l_value)
                ELSE
                    l_raw_sc <-- getall_conv_StatusCode_To_RawStatusCode(e_sc_bad_user_access_denied);
                    /* User was not authorized */
                    set_read_response(p_resp_msg, p_rvi, c_Variant_indet, l_raw_sc, p_aid)
                END
            ELSE
                /* Invalid at this level means the node Id is unknown:
                node Id cannot be invalid in case p_is_valid = TRUE */
                l_raw_sc <-- getall_conv_StatusCode_To_RawStatusCode(e_sc_bad_node_id_unknown);
                set_read_response(p_resp_msg, p_rvi, c_Variant_indet, l_raw_sc, p_aid)
            END
        ELSE
            l_raw_sc <-- getall_conv_StatusCode_To_RawStatusCode(p_sc);
            set_read_response(p_resp_msg, p_rvi, c_Variant_indet, l_raw_sc, p_aid)
        END
    END
    ;

    fill_read_response(p_user, req_msg, resp_msg) =
    VAR
        l_nb_ReadValue,
        l_continue,
        l_sc,
        l_rvi,
        l_nid,
        l_aid,
        l_index_range
    IN
        l_nb_ReadValue <-- get_nb_ReadValue;
        l_continue <-- init_iter_write_request(l_nb_ReadValue);
        WHILE l_continue = TRUE DO
            l_continue, l_rvi <-- continue_iter_write_request;
            l_sc, l_nid, l_aid, l_index_range <-- getall_ReadValue_NodeId_AttributeId(req_msg, l_rvi);
            fill_read_response_1(p_user, resp_msg, l_sc, l_nid, l_aid, l_index_range, l_rvi)
        INVARIANT
            rreqs_to_iterate <: t_ReadValue &
            rreqs_iterated   <: t_ReadValue &
            rreqs_to_iterate /\ rreqs_iterated = {} &
            rreqs_to_iterate \/ rreqs_iterated = cast_t_ReadValue[1..nb_ReadValue] &
            l_continue = bool(rreqs_to_iterate /= {}) &

            data_Value_Value =
            %rvi.(rvi : t_ReadValue &
                  rvi : rreqs_iterated &
                  rvi : dom(ReadValue_NodeId) &
                  ReadValue_NodeId(rvi) : dom(a_NodeId~) &
                  rvi : dom(ReadValue_AttributeId) &
                  a_NodeId~(ReadValue_NodeId(rvi)) : dom(AttributeID_Node_Variant(ReadValue_AttributeId(rvi)))
                  |
                  AttributeID_Node_Variant(ReadValue_AttributeId(rvi))(a_NodeId~(ReadValue_NodeId(rvi)))
                 ) &

            data_Value_StatusCode =
            %rvi.(rvi : t_ReadValue &
                  rvi : rreqs_iterated
                  |
                  {FALSE |-> conv_StatusCode_To_RawStatusCode(e_sc_bad_internal_error),
                   TRUE  |->
                             {FALSE |-> conv_StatusCode_To_RawStatusCode(e_sc_ok),
                              TRUE  |-> a_Value_StatusCode(a_NodeId~(ReadValue_NodeId(rvi)))}
                             (bool(ReadValue_AttributeId(rvi) = e_aid_Value &
                                   a_NodeClass(a_NodeId~(ReadValue_NodeId(rvi))) = e_ncl_Variable))}
                  (bool(rvi : dom(data_Value_Value)))
                 )
        VARIANT
            card(rreqs_to_iterate)
        END
    END

END
