/*
 * Licensed to Systerel under one or more contributor license
 * agreements. See the NOTICE file distributed with this work
 * for additional information regarding copyright ownership.
 * Systerel licenses this file to you under the Apache
 * License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain
 * a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/*! \mainpage S2OPC Toolkit API
 *
\section Introduction

The S2OPC OPC UA Toolkit provides a Client/Server C source code implementation including an OPC UA communication
stack, B model and C source code implementation for a minimal set of services and a cryptographic library adaptation for
OPC UA needs (using mbedtls). S2OPC also provides a PubSub C source code implementation, it shares some components with
Client/Server part (cryptographic services, OPC UA types, etc.).

For further details on supported features see the <a href="https://gitlab.com/systerel/S2OPC/-/blob/master/README.md">README.md file</a> content.
Additional information on how to build, configure and use S2OPC is also available on <a href="https://gitlab.com/systerel/S2OPC/-/wikis/home">the wiki</a>.


The following sections only concern the C source documentation.

You will find documentation on the Python binding for S2OPC on following page:
<a href="pys2opc/index.html">Go to PyS2OPC documentation</a>

\section clientserver Client / Server API

The Client / Server API is composed of high-level (wrapper) API and low-level API. The prefered way to use S2OPC is to use only the high-level API.
Note that the low-level API will be subject to important changes and refactoring in the future release since the high-level API is designed to address any application need.

\subsection common_client_server High-level Common Client/Server API

The high-level common Client/Server API shall be used to initialize (or clear) the S2OPC toolkit prior to use (or after using) the high-level client/server API.
Those functions are shared between high-level server/client API:
- ::SOPC_CommonHelper_Initialize shall be called before any other high-level API function to initialize S2OPC client/server tooklit.
  The logger configuration might be provided as parameter, the default configuration might be retrieved using ::SOPC_Common_GetDefaultLogConfiguration 
  and modified as needed.
- ::SOPC_CommonHelper_Clear shall be called after any other high-level API function to clear S2OPC client/server tooklit.
- ::SOPC_CommonHelper_GetBuildInfo provides S2OPC client/server toolkit build info.

\subsection server High-level Server API

The high-level server API provides functions for configuration (endpoints and security, address space content, user management, etc.) and functions to manage server execution (start/stop, local service execution, etc.).

The main configuration functions are defined by libs2opc_server_config.h:
- ::SOPC_ServerConfigHelper_Initialize shall be called before any other function of the server wrapper module (and after ::SOPC_CommonHelper_Initialize).
- ::SOPC_ServerConfigHelper_Clear shall be called when server wrapper module is not used anymore.
- ::SOPC_ServerConfigHelper_ConfigureFromXML loads configuration from XML configuration files (server endpoints and security, address space, users). See \ref xml_config "XML file examples".
- ::SOPC_ServerConfigHelper_SetMethodCallManager sets a manager for callbacks to use for CallMethod service (available only if s2opc is NOT compiled with S2OPC_NANO_PROFILE=1).
- ::SOPC_ServerConfigHelper_SetWriteNotifCallback sets a callback to receive notification on address space write operations from clients.
- ::SOPC_ServerConfigHelper_SetLocalServiceAsyncResponse sets a callback to use local services on server in an asynchronous way (see ::SOPC_ServerHelper_LocalServiceAsync).
- ::SOPC_ServerConfigHelper_SetKeyPasswordCallback sets a callback to provide the password to decrypt the private key of the server (if encrypted).

In case the dedicated XML configuration files are not used to configure server, use the additional configuration functions located in libs2opc_server_config_custom.h.

The main functions for server execution are defined by libs2opc_server.h:
- ::SOPC_ServerHelper_StartServer: starts the server asynchronously, it runs until requested to stop.
- ::SOPC_ServerHelper_StopServer: stops the server.
- ::SOPC_ServerHelper_Serve synchronous alternative to ::SOPC_ServerHelper_StartServer, it blocks until server stopped.
- ::SOPC_ServerHelper_LocalServiceAsync: executes a local service (add nodes, read, write, etc.) on server asynchronously, service response is provided through callback defined with ::SOPC_ServerConfigHelper_SetLocalServiceAsyncResponse.
- ::SOPC_ServerHelper_LocalServiceSync: executes a local service (add nodes, read, write, etc.) on server synchronously.
- ::SOPC_ServerHelper_CreateEvent: creates an OPC UA event instance of the given known event type (available only if s2opc is compiled with S2OPC_EVENT_MANAGEMENT=1)
- ::SOPC_ServerHelper_TriggerEvent: triggers the given OPC UA event instance from the given node as notifier (available only if s2opc is compiled with S2OPC_EVENT_MANAGEMENT=1)

See implementation examples
<a href="https://gitlab.com/systerel/S2OPC/-/blob/master/samples/ClientServer/demo_server/toolkit_demo_server.c">toolkit_demo_server.c</a> (XML configuration only),
<a href="https://gitlab.com/systerel/S2OPC/-/blob/master/samples/embedded/cli_pubsub_server/src/cli_pubsub_server.c">Command-Line interactive embedded demo (Server +PubSub)</a> (static embedded configuration only),
<a href="https://gitlab.com/systerel/S2OPC/-/blob/master/tests/ClientServer/validation_tests/server/toolkit_test_server_local_service.c">toolkit_test_server_local_service.c</a> (local services),
<a href="https://gitlab.com/systerel/S2OPC/-/blob/master/tests/ClientServer/validation_tests/server/toolkit_test_server.c">toolkit_test_server.c</a> (both XML and non-XML configuration)
or <a href="https://gitlab.com/systerel/S2OPC/-/blob/master/tests/ClientServer/validation_tests/client/toolkit_test_server_client.c">toolkit_test_server_client.c</a> (both client and server).

\anchor xml_config
See XML configuration schemas and examples:
- Server endpoints and security <a href="https://gitlab.com/systerel/S2OPC/-/blob/master/schemas/s2opc_clientserver_config.xsd">XSD schema</a> and <a href="https://gitlab.com/systerel/S2OPC/-/blob/master/samples/ClientServer/data/config/S2OPC_Server_Demo_Config.xml">XML example</a>
- Address space <a href="http://opcfoundation.org/UA/2011/03/UANodeSet.xsd">XSD schema</a> and <a href="https://gitlab.com/systerel/S2OPC/-/blob/master/samples/ClientServer/data/address_space/s2opc.xml">XML example</a>
- Users <a href="https://gitlab.com/systerel/S2OPC/-/blob/master/schemas/s2opc_clientserver_users_config.xsd">XSD schema</a> and <a href="https://gitlab.com/systerel/S2OPC/-/blob/master/samples/ClientServer/data/config/S2OPC_Users_Demo_Config.xml">XML example</a>

Also see the <a href="https://gitlab.com/systerel/S2OPC/-/wikis/Demo">demonstration wiki section</a> for explanation on how to run the server and configure it.

\subsection client High-Level Client API

The high-level client API provides functions for configuration (endpoints and security, user type) and functions to manage client execution (start/stop, service execution, etc.).

The main configuration functions are defined by libs2opc_client_config.h:
- ::SOPC_ClientConfigHelper_Initialize shall be called before any other function of the client wrapper module (and after ::SOPC_CommonHelper_Initialize).
- ::SOPC_ClientConfigHelper_Clear shall be called when client wrapper module is not used anymore.
- ::SOPC_ClientConfigHelper_ConfigureFromXML loads configuration from XML configuration files (client connection endpoint and security, user type) and
  returns the array of configured connections. See \ref client_xml_config "XML file examples".
- ::SOPC_ClientConfigHelper_SetServiceAsyncResponse sets a callback to use services in an asynchronous way (see ::SOPC_ClientHelper_ServiceAsync).
- ::SOPC_ClientConfigHelper_SetClientKeyPasswordCallback sets a callback to provide the password to decrypt the private key of the client (if encrypted).
- ::SOPC_ClientConfigHelper_SetUserNamePasswordCallback sets a callback to retrieve user/password for connection using UserName type for session activation.
- ::SOPC_ClientConfigHelper_SetUserKeyPasswordCallback sets a callback to retrieve user private key decryption password for connection using X509 user type (if encrypted).
- ::SOPC_ClientConfigHelper_GetConfigFromId returns the configuration of a connection from the string id defined in XML configuration.

In case the dedicated XML configuration files are not used to configure client, use the additional configuration functions located in libs2opc_client_config_custom.h.

The main functions for client execution are defined by libs2opc_client.h:
- ::SOPC_ClientHelper_DiscoveryServiceAsync: executes a discovery service asynchronously for a connection configuration.
- ::SOPC_ClientHelper_DiscoveryServiceSync: executes a discovery service synchronously for a connection configuration.
- ::SOPC_ClientHelper_Connect: establishes a connection and returns the connection instance.
- ::SOPC_ClientHelper_Disconnect: disconnects a connection instance.
- ::SOPC_ClientHelper_ServiceAsync: executes a service asynchronously on a connection instance.
- ::SOPC_ClientHelper_ServiceSync: executes a service synchronously on a connection instance.

Additional functions are provided and dedicated to subscription related services, it provides management of 1 subscription per connection instance:
- ::SOPC_ClientHelper_CreateSubscription: creates a subscription on a connection and returns the subscription instance.
- ::SOPC_ClientHelper_DeleteSubscription: deletes a subscription instance.
- ::SOPC_ClientHelper_Subscription_CreateMonitoredItems: creates monitored items on a subscription instance with associated context.
- ::SOPC_ClientHelper_Subscription_DeleteMonitoredItems: deletes monitored items on a subscription instance.
- ::SOPC_ClientHelper_Subscription_AsyncService: executes other subscription related services asynchronously on a subscription instance.
- ::SOPC_ClientHelper_Subscription_SyncService: executes other subscription related services synchronously on a subscription instance.


See implementation examples
<a href="https://gitlab.com/systerel/S2OPC/-/blob/master/samples/ClientServer/client_wrapper/examples">\<service>.c</a>
or <a href="https://gitlab.com/systerel/S2OPC/-/blob/master/samples/embedded/cli_client/src/cli_client_main.c">Command Line Interface client</a>,
and <a href="https://gitlab.com/systerel/S2OPC/-/blob/master/tests/ClientServer/validation_tests/client/toolkit_test_client.c">toolkit_test_client.c</a>.

\anchor client_xml_config
See XML configuration schemas and examples: client connections endpoint and security <a href="https://gitlab.com/systerel/S2OPC/-/blob/master/schemas/s2opc_clientserver_config.xsd">XSD schema</a> and <a href="https://gitlab.com/systerel/S2OPC/-/blob/master/samples/ClientServer/data/config/S2OPC_Client_Example_Config.xml">XML example</a>

\subsection lclient Low-level client API (usage not recommended and API subject to changes)

Main configuration functions and types for client are provided by sopc_toolkit_config.h and sopc_user_app_itf.h.
The functions with `SOPC_ToolkitServer_` prefix shall be ignored.

- (Optional) log configuration with ::SOPC_Common_Initialize
- ::SOPC_Toolkit_Initialize initializes the toolkit and configures the ::SOPC_ComEvent_Fct application callback to manage received events from toolkit.
- ::SOPC_ToolkitClient_AddSecureChannelConfig adds a new secure channel configuration (::SOPC_SecureChannel_Config).
  In case security is used, the default PKI provider might be used (sopc_pki_stack.h) and certficates shall be loaded (sopc_key_manager.h).
- ::SOPC_Toolkit_Clear shall be called when toolkit is not used anymore.

Once toolkit is intitialized and a secure channel configuration is added, the client is able to establish connection:
- ::SOPC_ToolkitClient_AsyncActivateSession to establish a secure channel and activate a session with given user token.
- ::SOPC_ToolkitClient_AsyncActivateSession_Anonymous simplified version of ::SOPC_ToolkitClient_AsyncActivateSession for anonymous user.
- ::SOPC_ToolkitClient_AsyncActivateSession_UsernamePassword simplified version of ::SOPC_ToolkitClient_AsyncActivateSession for using UserName.

Session activation result is provided by event ::SE_ACTIVATED_SESSION through the configured ::SOPC_ComEvent_Fct callback, resulting session identifier is necessary to send requests through a session.

It is also possible to send discovery services requests to through a configured connection without session using:
- ::SOPC_ToolkitClient_AsyncSendDiscoveryRequest establishes a secure channel without session and send the given request. Response received with event ::SE_RCV_DISCOVERY_RESPONSE  through ::SOPC_ComEvent_Fct callback.

Once a session has been activated it will be possible to send all kind of requests using the session identifier to call:
- ::SOPC_ToolkitClient_AsyncSendRequestOnSession. Response are received with event ::SE_RCV_SESSION_RESPONSE through ::SOPC_ComEvent_Fct callback.

\note The client API provides raw OPC UA responses to the OPC UA requests sent. Only the secure channel and session services are automatically managed by toolkit. See \ref client for automated subscription service support.

See implementation examples
<a href="https://gitlab.com/systerel/S2OPC/-/blob/master/samples/ClientServer/demo_client/">Command line tools s2opc_<service>.c</a> for dedicated services (read, write, etc.).

\subsection lserver Low-level server API (usage not recommended and API subject to changes)

Main configuration function and types for server are provided by sopc_toolkit_config.h and sopc_user_app_itf.h.
The functions with `SOPC_ToolkitClient_` prefix shall be ignored.

Some are shared with \ref lclient configuration:
- (Optional) log configuration with ::SOPC_Common_Initialize
- ::SOPC_Toolkit_Initialize initializes the toolkit and configure the ::SOPC_ComEvent_Fct application callback to manage received events from toolkit.
- ::SOPC_ToolkitServer_Configured shall be called once all the configuration steps are terminated.
- ::SOPC_Toolkit_Clear shall be called when toolkit is not used anymore.

For main server configuration there are 2 possible options. The first is to use the XML configuration parser:
- Configure with XML file (<a href="https://gitlab.com/systerel/S2OPC/-/blob/master/schemas/s2opc_clientserver_config.xsd">XSD schema</a>, <a href="https://gitlab.com/systerel/S2OPC/-/blob/master/samples/ClientServer/data/config/S2OPC_Server_Demo_Config.xml">XML example</a>) using ::SOPC_Config_Parse, it produces a pre-filled ::SOPC_S2OPC_Config.
- In case security is used, the default PKI provider might be used (sopc_pki_stack.h) and certificates shall be loaded (sopc_key_manager.h) into SOPC_S2OPC_Config (SOPC_Server_Config::pki, SOPC_Server_Config::serverCertificate, SOPC_Server_Config::serverKey) using certificates paths from ::SOPC_Server_Config.

The second is to allocate a ::SOPC_S2OPC_Config structure and to initialize it using ::SOPC_S2OPC_Config_Initialize function, then initialize all ::SOPC_Server_Config fields manually.

In both cases the \ref users shall be configured for each ::SOPC_Endpoint_Config in SOPC_Server_Config::endpoints and the \ref methods shall be configured if CallMethod service shall be supported.

Finally for each endpoint of the server (SOPC_Server_Config::endpoints), ::SOPC_ToolkitServer_AddEndpointConfig shall be called to configure it in the server.

\subsubsection address Configure initial address space

Address space configuration shall be done to define the initial data present in the address space.
This configuration shall be defined using <a href="http://opcfoundation.org/UA/2011/03/UANodeSet.xsd">OPC UA standard schema</a>.
An example is provided for <a href="https://gitlab.com/systerel/S2OPC/-/blob/master/samples/ClientServer/data/address_space/s2opc_nano.xml">a nano server</a>
and <a href="https://gitlab.com/systerel/S2OPC/-/blob/master/samples/ClientServer/data/address_space/s2opc.xml">a nano extended server</a>.

All the reciprocal references between nodes shall be present in it. The script <a href="https://gitlab.com/systerel/S2OPC/-/blob/master/scripts/gen-reciprocal-refs-address-space.xslt">gen-reciprocal-refs-address-space.xslt</a> might be used to generate reciprocal references missing (XSLT 2.0 processor required).

Once the XML address space is defined, the C structure to be used for toolkit configuration shall be generated.
It could be done using the Python C code generator prior to compilation or using the dynamic XML loader.

Use the XML dynamic loader ::SOPC_UANodeSet_Parse to convert at runtime a UANodeSet XML file to expected C structure to be configured with ::SOPC_ToolkitServer_SetAddressSpaceConfig.<br/>
Or use the Python script <a href="https://gitlab.com/systerel/S2OPC/-/blob/master/scripts/generate-s2opc-address-space.py">generate-s2opc-address-space.py</a> to convert a UANodeSet XML file into a C file that can be compiled in the binary, and retrieved with the embedded address space loader ::SOPC_Embedded_AddressSpace_Load.

Finally call ::SOPC_ToolkitServer_SetAddressSpaceConfig with the address space structure to configure the server address space content
and set the client write notification callback with ::SOPC_ToolkitServer_SetAddressSpaceNotifCb to receive notification on client write operation.

\subsubsection address2 Configure address space update

Once the initial address space is configured, you might want to configure behavior on address space update from client or to configure how to update address space locally.

The server application will be notified of address space changes, it only needs to configure the associated callback using ::SOPC_ToolkitServer_SetAddressSpaceNotifCb with the ::SOPC_AddressSpaceNotif_Fct application callback to manage received ::AS_WRITE_EVENT events from toolkit.

The server application is able to modify the address space on runtime using OPC UA services locally.
It is allowed to treat OPC UA service requests (::OpcUa_ReadRequest, ::OpcUa_WriteRequest, ::OpcUa_BrowseRequest and discovery service requests) using ::SOPC_ToolkitServer_AsyncLocalServiceRequest.
Once the function is called, an asynchronous ::SE_LOCAL_SERVICE_RESPONSE event will be received by the ::SOPC_ComEvent_Fct application callback containing the response message (::OpcUa_ReadResponse, etc.).

\subsubsection users User authentication and user authorization managers

User authentication and user authorization managers shall be implemented for each endpoint (SOPC_Endpoint_Config::authenticationManager and SOPC_Endpoint_Config::authorizationManager).

Default implementations accepting any user for authentication (::SOPC_UserAuthentication_CreateManager_AllowAll) and authorization (::SOPC_UserAuthorization_CreateManager_AllowAll) are provided for development use.
Otherwise either application implements its own functions (::SOPC_UserAuthentication_ValidateUserIdentity_Func and ::SOPC_UserAuthorization_AuthorizeOperation_Func) depending on its needs (LDAP, etc.) or a simple implementation based on XML user management configuration file loading is provided.

In the latter case use the parser for XML user management configuration file (<a href="https://gitlab.com/systerel/S2OPC/-/blob/master/schemas/s2opc_clientserver_users_config.xsd">XSD schema</a>, <a href="https://gitlab.com/systerel/S2OPC/-/blob/master/samples/ClientServer/data/config/S2OPC_Users_Demo_Config.xml">XML example</a>) ::SOPC_UsersConfig_Parse and set result in ::SOPC_Endpoint_Config.

\note The toolkit does not provide default implementation to encrypt/decrypt the user credentials which means a Secure Channel with SignAndEncrypt security mode and None user security policy shall be used.

\subsection methods Method call manager configuration

If the MethodCall service shall be supported, it is necessary to define a method call manager ::SOPC_MethodCallManager.
A basic implementation is provided by ::SOPC_MethodCallManager_Create, this manager provides the function ::SOPC_MethodCallManager_AddMethod to define method implementation through ::SOPC_MethodCallFunc_Ptr callback.

\section pubsub PubSub API

Examples of Pub or Sub test applications can be found here <a href="https://gitlab.com/systerel/S2OPC/-/blob/master/tests/PubSub/validation_tests/pub_scheduler_test.c">publisher</a> and <a href="https://gitlab.com/systerel/S2OPC/-/blob/master/tests/PubSub/validation_tests/sub_scheduler_conf_test.c">subscriber</a>, and a PubSub-Server sample is implemented <a href="https://gitlab.com/systerel/S2OPC/-/blob/master/samples/PubSub_ClientServer/pubsub_server">here</a>.

Moreover, the <a href="https://gitlab.com/systerel/S2OPC/-/blob/master/samples/embedded/cli_pubsub_server">cli_pubsub_server</a> sample provides an example of implementation with a static configuration for embedded targets.

Main interface is defined by sopc_pub_scheduler.h and sopc_sub_scheduler.h.

\subsection common Common API (PubSub and Client/Server)

The common API shall be used to initialize (or clear) the S2OPC toolkit prior to use (or after using) the client/server API or pubsub API.
For the client/server the initialization and clear functions are automatically called by low-level API functions or by high-level API functions.
Those functions are shared between all API when including the S2OPC Common library:
- ::SOPC_Common_Initialize shall be called before any other high-level API function to initialize S2OPC toolkit 
  (constants and platfrom specific checks, logger initalization).
- ::SOPC_Common_Clear shall be called after any other high-level API function to clear S2OPC toolkits.
- ::SOPC_Common_GetDefaultLogConfiguration retrieve default log configuration.

\subsection pubsub_config Configuration API
The PubSub configuration API is provided through sopc_pubsub_conf.h and uses the concepts of OPC UA PubSub specification Common Configuration Model (see §9.1 in OPC UA part 14 v1.04) to define the following elements configuration:
PubSubConnection, ReaderGroup, DataSetReader, SecurityMode,  SecurityKeyServices, FieldTarget, FieldMetaData, PublishedDataSet, WriterGroup, WriterDataSet, PublishedDataSet, PublishedDataSetSource, PublishedVariable.

The protocol to use is automatically deduced from the PubSubConnection address prefix (only UDP, Ethernet and MQTT supported for now).
The configuration might be generated by parsing an XML configuration file, with <a href="https://gitlab.com/systerel/S2OPC/-/blob/master/schemas/s2opc_pubsub_config.xsd">XSD schema format</a>, using the function ::SOPC_PubSubConfig_ParseXML to dynamically parse XML file. Or statically using <a href="https://gitlab.com/systerel/S2OPC/-/blob/master/scripts/generate-s2opc_pubsub-static-config.py">generate-s2opc_pubsub-static-config.py</a> script which generate a C file. SOPC_PubSubConfig_GetStatic function is generated and return ::SOPC_PubSubConfiguration pointer.
See <a href="https://gitlab.com/systerel/S2OPC/-/blob/master/samples/embedded/cli_pubsub_server/src/cli_pubsub_server.c">Command-Line interactive embedded demo (Server +PubSub)</a> for a static embedded configuration example.

\subsection pubsub_handlers Configure data source/target handlers

For a Publisher application, a data source handler shall be defined to retrieve the data from configured information in the PublishedDataSet.
The handler shall be built using ::SOPC_PubSourceVariableConfig_Create, by providing a function with the signature ::SOPC_GetSourceVariables_Func, and shall then be provided on Publisher start.

For a Subscriber application, a data target handler shall be defined to set the data from configured information in the DataSetReader.
The handler shall be built using ::SOPC_SubTargetVariableConfig_Create by providing a function with the signature ::SOPC_SetTargetVariables_Func, and shall then be provided on Subscriber start.

\subsection pubsub_sks Configure SKS

For Publisher and Subscriber applications a Security Keys manager shall be defined using ::SOPC_PubSubSKS_CreateManagersFromConfig or ::SOPC_PubSubSKS_AddSkManager to permit encrypted/signed communication 
(that uses ::SOPC_PubSubSKS_GetSecurityKeys).

Publisher and Subscriber schedulers will retrieve the keys directly from the Security Keys manager which is in charge of locally storing the up to date keys.
But in order to implement a complete SKS mechanism on Pub/Sub side, the following elements should also be configured to update the keys in the manager:
- Security Keys Manager(s) (see sopc_sk_manager.h and sopc_sk_secu_group_managers.h): manages local storage of the keys retrieved from the Security Keys Provider for a given security group, it should be created using ::SOPC_SKManager_Create for each security group.
- Security Keys Provider (see sopc_sk_provider.h): source providing the Security Keys using Security Keys Services, it should implement a client connection calling the GetSecurityKeys method of the SKS server(s).
  Several providers might be defined using ::SOPC_SKProvider_TryList_Create to have alternative SKS sources.
- Security Keys Builder (see sopc_sk_builder.h): provides update function to retrieve keys from the Security Keys Provider and fills the Security Keys Manager.
  ::SOPC_SKBuilder_Setter_Create should be used to create a builder replacing all keys on update (on PubSub side).
  ::SOPC_SKBuilder_Append_Create + ::SOPC_SKBuilder_Truncate_Create should be used to create a builder appending keys and limiting the number of keys stored (on SKS side).
- Security Keys Scheduler (see sopc_sk_scheduler.h): schedules the periodic update of keys retrieved using the builder.
  ::SOPC_SKscheduler_Create should be used to create the scheduler, then ::SOPC_SKscheduler_AddTask (or ::SOPC_PubSubSKS_AddTasks for PubSub side) 
  should be called to configure the task with defined Security Keys Builder, Provider and Manager.
  And finally ::SOPC_SKscheduler_Start should be called to start the scheduler task updating the keys.

Note: Security Keys manager might be configured to stub connection to a real SKS server by using local keys files or data updated externally.

The [`samples/PubSub_ClientServer/pubsub_server/pubsub.c`](https://gitlab.com/systerel/S2OPC/-/blob/master/samples/PubSub_ClientServer/pubsub_server/pubsub.c) provides an example of implementation using Security Key Service pull model from a dedicated SKS server with the described elements. 
This application is configured by default to self-communicate variable values in a secure way using Pub/Sub connection and expose the variable values as an OPC UA server.

The [`samples/PubSub_ClientServer/sks_push_model`](https://gitlab.com/systerel/S2OPC/-/blob/master/samples/PubSub_ClientServer/sks_push_model) provides an example of implementation using Security Key Service push model:
- `controller_sks_client` generates random keys and push them as an OPC UA client to devices OPC UA server with SKS push model, it is also a Pub/Sub application which have direct access to the security keys generated locally.
- `device_sks_server_push` is a Pub/Sub application using SKS push model to receive up to date keys from the controller through an OPC UA server implementing the SetSecurityKeys method.
- The controller and device are communicating variable values in a secure way through reciprocal Pub/Sub connections and expose the variable values as an OPC UA server.

\subsection pubsub_lifecycle PubSub lifecycle

The Publisher lifecycle is managed through the functions ::SOPC_PubScheduler_Start and ::SOPC_PubScheduler_Stop.
And the Subscriber lifecycle is managed through the functions ::SOPC_SubScheduler_Start and ::SOPC_SubScheduler_Stop.
The Subscriber state changes might be received by providing a handler with the signature ::SOPC_SubscriberStateChanged_Func.

\note The PubSub library part is only supported for POSIX platform for the moment.

\section config_constants OPC UA stack behavior configuration constants

Two sets of constants are defined to configure the OPC UA stack behavior. One of them is designed for the OPC UA common encoding layer (message size, string max length, etc.) 
and another for the OPC UA Client/Server services layer (maximum number of operations per call, etc.).
Those variables might be changed for specific needs at library compile time and are defined in respectively in sopc_common_constants.h and sopc_toolkit_config_constants.h.

 */
