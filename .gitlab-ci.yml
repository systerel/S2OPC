# Continuous Integration configuration with gitlab.com
# See https://gitlab.com/help/ci/yaml/README.md


#########################################################
# Default CI pipeline configuration:
# - preset variables: 'S2OPC_NODE_MANAGEMENT = 1' set
# - jobs run in stages:
#   - gen: generation job
#   - build: build-linux64-ASan
#   - tests:
#     - test-check
#     - test-unit
#     - test-uactt
#
# CI pipeline manual run with 'ALL_TESTS = 1':
# - jobs run in stages:
#   - build: build-linux64-pys2opc # 'WITH_ASAN = 0' and 'WITH_PYS2OPC = 1'
#   - tests: # TEST_SERVER_XML_ADDRESS_SPACE, TEST_SERVER_XML_CONFIG and TEST_USERS_XML_CONFIG are NOT set to use static config
#     - test-unit-all-tests
#     - test-uactt-all-tests
#
# CI pipeline manual run with 'ALL_BUILDS = 1':
# - jobs run in stages:
#   - gen: generation job
#   - build: # 'WITH_STATIC_SECURITY_DATA: 1', 'WITH_CONST_ADDSPACE: 1' and 'PUBSUB_STATIC_CONFIG: 1'
#     - build-linux64-static-conf
#   - tests:
#     - test-unit
#   - build-others:
#     - build-win32
#     - build-win64
#     - windows-appveyor
#     - build-zephyr
#   - test-others:
#     - test-zephyr
# CI pipeline manual run with 'WINDOWS_TEST = 1':
# - jobs run in stages:
#   - build-others:
#     - windows-appveyor
#
# CI pipeline manual run with 'CROSS_COMPILE = 1':
# - jobs run in stages:
#   - build-others:
#     - build-win32
#     - build-win64
#     - build-rpi
#     - build-zephyr
#     - build-freertos
#   - test-others:
#     - test-zephyr
#########################################################

# Ensures job failure when intermediate script line fails
# (see gitlab issues #25394 and #383355)
variables:
  FF_ENABLE_BASH_EXIT_CODE_CHECK: "true"

.nominal_build_variables: &nominal_build_variables
  S2OPC_NODE_MANAGEMENT: 1

.nominal_test_variables: &nominal_test_variables
  S2OPC_NODE_MANAGEMENT: 1
  TEST_SERVER_XML_ADDRESS_SPACE: S2OPC_Test_NodeSet.xml
  TEST_SERVER_XML_CONFIG: S2OPC_Server_UACTT_Config.xml
  TEST_USERS_XML_CONFIG: S2OPC_UACTT_Users.xml
  TEST_CLIENT_XML_CONFIG: S2OPC_Client_Test_Config.xml
  TEST_PASSWORD_PRIVATE_KEY : password
  TEST_PASSWORD_USER : password

# Variables for ALL_BUILDS and ALL_TESTS manual pipelines

.all-tests_build_variables: &all-tests_build_variables
  WITH_PYS2OPC: 1

.all-builds_build_variables: &all-builds_build_variables
  WITH_STATIC_SECURITY_DATA: 1
  WITH_CONST_ADDSPACE: 1
  PUBSUB_STATIC_CONFIG: 1

stages:
  - gen
  - build
  - test
  - build-others
  - test-others
  - analyses
  - doc

# Avoid to run 2 pipelines in case of MR
# (1 for branch and 1 for MR)
workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
    - if: '$CI_PIPELINE_SOURCE == "web"'
    - if: '$CI_COMMIT_TAG'
    - if: '$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS'
      when: never
    - if: '$CI_COMMIT_BRANCH'

.docker-job: &docker_job
  tags:
    - docker
    - linux
.zephyr-job: &zephyr_job
  tags:
    - zephyr

###
# Generation jobs
###

generation:
  <<: *docker_job
  stage: gen
  image: com.systerel.fr:5000/c838/gen-ext@sha256:66cadeb219f3904e78ade14ef85e57aa0309eff4416e9625b0fd4bea8e976cd7 # digest of gen-ext:1.4
  script:
    - ./clean.sh all
    - ./.validates_xml_schemas.sh
    - ./.pre-build-ext.sh
    - ./.check_generated_code.sh
  artifacts:
    name: 'bgenc-${CI_COMMIT_REF_SLUG}_${CI_COMMIT_SHA}_job${CI_JOB_ID}'
    paths:
      - 'pre-build.log'
    when: always
    expire_in: '1 month'
  rules:
    - if: "$NO_GEN == null && \
           $WINDOWS_TEST == null && \
           $CROSS_COMPILE == null && \
           $WITH_COVERITY == null && \
           $S2OPC_PUBSUB_ONLY == null &&\
           $ALL_BUILDS == null && \
           $ALL_TESTS == null && \
           $WITH_DOC == null"
      when: on_success

check_commit_signature:
  stage: gen
  image: registry.gitlab.com/systerel/s2opc/build@sha256:9919ba85c9d2bf359a2581b274d34b5cd3395114f098c1b99efcea49b043ccec # digest of build:1.39
  script:
    - ./.check_signed_commit.sh
  rules:
   - if: "$CI_PIPELINE_SOURCE == 'merge_request_event'"
     when: always

check_commit_validity:
  stage: doc
  image: cicirello/pyaction@sha256:1e61034d26988094c92b629bf1d5f2027bc0659a347f31653ae405a7b05f97ae # digest of cicirello/pyaction:v4.25.0
  script:
    # Unnecessary for R-O access on public project: ${CI_JOB_TOKEN}
    - './.check_ref_commit.sh -v "${SOPC_CURRENT_MILESTONE}" "origin/${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}" "${CI_MERGE_REQUEST_IID}" "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}"'
  rules:
   - if: "$CI_PIPELINE_SOURCE == 'merge_request_event'"
     when: always
###
# Compilation jobs
###

.build-linux: &build_linux
  <<: *docker_job
  stage: build
  image: registry.gitlab.com/systerel/s2opc/build@sha256:9919ba85c9d2bf359a2581b274d34b5cd3395114f098c1b99efcea49b043ccec # digest of build:1.39
  script:
    - &build_command_line './build.sh && cd $BUILD_DIR && cmake --build . --target install || exit $?'
  variables: &build_linux_variables
    CMAKE_INSTALL_PREFIX: '../install_linux64'
    DOCKER_IMAGE: 'sha256:8e0b9d304625e87b124620cf0c961e7b2a045134d6631affac0793fd7f3d4fcb'
    BUILD_DIR: build
  artifacts:
    name: 'bin-${CI_COMMIT_REF_SLUG}_${CI_COMMIT_SHA}_job${CI_JOB_ID}'
    paths:
      - '*.log'
      - 'install_linux64/'
      - 'build/'  # Required by tests / coverage
    expire_in: '1 month'
    when: always
# Common rules overwritten by each job using this template
#  rules: # note: should be repeated in each child job of *build_linux
#    - if: "$WINDOWS_TEST == null && $CROSS_COMPILE == null && $WITH_COVERITY == null && $WITH_DOC == null"
#      when: on_success

# Used by "normal" pipeline
build-linux64-ASan:
  <<: *build_linux
  variables:
    <<: [*build_linux_variables,*nominal_build_variables]
    WITH_ASAN: 1
    WITH_UBSAN: 1
  rules: # 1st line repeat .build-linux + added rules to avoid ASAN build
    - if: "$WINDOWS_TEST == null && $CROSS_COMPILE == null && \
           $WITH_COVERITY == null && $WITH_COVERAGE == null && $WITH_DOC == null && \
           $NO_ASAN == null && $ALL_TESTS == null && $ALL_BUILDS == null" # avoid ASAN build in most of nightly builds
      when: on_success

# Used by ALL_BUILDS to check we still manage to build with missing libs
# (Paho for PubSub and Expat for ClientServer)
build-with_missing_libs:
  <<: *build_linux
  variables:
    <<: *build_linux_variables
  script:
    - rm -fr /usr/local/lib/cmake/eclipse-paho-mqtt-c || exit $?
    - ./build.sh || exit $?
    - rm -fr /usr/local/lib/cmake/expat-* || exit $?
    - ./clean.sh || exit $?
    - S2OPC_CLIENTSERVER_ONLY=1 ./build.sh || exit $?
  rules:
    - if: "$ALL_BUILDS != null"
      when: on_success
  artifacts:

# Used by ALL_BUILDS to check we manage to build with nocrypto lib
build-with_no_crypto:
  <<: *build_linux
  variables:
    <<: *build_linux_variables
  script:
    - S2OPC_CRYPTO_MBEDTLS=0 ./build.sh || exit $?
  rules:
    - if: "$ALL_BUILDS != null"
      when: on_success
  artifacts:

# Used by all-tests pipeline (add tests which needs NO_ASAN)
build-linux64-pys2opc:
  <<: *build_linux
  variables:
    <<: [*build_linux_variables,*all-tests_build_variables] # add pys2opc
  rules: # do not repeat .build-linux: due to disjunction + need only those 2 conditions
    - if: "$ALL_TESTS != null || $NO_ASAN != null && $S2OPC_NANO_PROFILE != '1'" # if ASAN is deactivated build PyS2OPC by default (exclude nano scope: see TODO below)
      when: on_success

# Used when ALL_BUILDS set (tests use static configuration)
build-linux64-static-conf:
  <<: *build_linux
  variables:
    <<: [*build_linux_variables,*all-builds_build_variables] # add static conf
  rules: # single case rule of ALL_BUILDS
    - if: "$ALL_BUILDS != null"
      when: on_success

build-linux64-NoASan-NoPyS2OPC:
  <<: *build_linux
  variables:
    <<: *build_linux_variables
  rules: # In case of coverage analysis or when nano scope is used (TODO: PyS2OPC shall be built but tests will fail: use another server with subscription in tests)
    - if: "$WITH_COVERAGE != null || $NO_ASAN != null && $S2OPC_NANO_PROFILE == '1'"
      when: on_success

build-win64: &build_win64
  <<: *docker_job
  stage: build-others
  image: registry.gitlab.com/systerel/s2opc/mingw_build@sha256:5cbfd3181a228b9510b402cea6ac83175ac482d348dd2673f6a4c7aeac40f773 # digest of mingw_build:1.14
  script:
    # Manually disable PyS2OPC for windows cross builds. When set in "variables:", the value is overwritten.
    - 'export WITH_PYS2OPC=OFF'
    - *build_command_line
  variables: &build_win64_variables
    CMAKE_INSTALL_PREFIX: '../install_win64'
    CMAKE_TOOLCHAIN_FILE: 'toolchain-mingw32-w64_x86_64.cmake'
    DOCKER_IMAGE: 'sha256:10b620d966863253a69ce402e6e11c0932321c77569de3ea4363c31d81ab849a'
    BUILD_DIR: build_toolchain
    S2OPC_CLIENTSERVER_ONLY: 1 # PubSub is not compatible with windows platform
    WARNINGS_AS_ERRORS: 0 # Some format warnings remain on MinGW
  artifacts:
    name: 'bin-w64-${CI_COMMIT_REF_SLUG}_${CI_COMMIT_SHA}_job${CI_JOB_ID}'
    paths:
      - '$BUILD_DIR/bin'
      - 'install_win64/'
    expire_in: '1 month'
  rules:
   - if: "$CROSS_COMPILE != null || $ALL_BUILDS != null || $CI_PIPELINE_SOURCE == 'merge_request_event' || $CI_COMMIT_TAG"
     when: always # run even if previous job in pipeline failed

build-win32:
  <<: *build_win64
  variables:
    <<: *build_win64_variables
    CMAKE_INSTALL_PREFIX: '../install_win32'
    CMAKE_TOOLCHAIN_FILE: 'toolchain-mingw32-w64.cmake'
  artifacts:
    name: 'bin-w32-${CI_COMMIT_REF_SLUG}_${CI_COMMIT_SHA}_job${CI_JOB_ID}'
    paths:
      - '$BUILD_DIR/bin/'
      - 'install_win32/'
    expire_in: '1 month'
  rules:
   - if: "$CROSS_COMPILE != null || $ALL_BUILDS != null || $CI_PIPELINE_SOURCE == 'merge_request_event' || $CI_COMMIT_TAG"
     when: always # run even if previous job in pipeline failed

build-rpi:
  <<: *docker_job
  stage: build-others
  image: registry.gitlab.com/systerel/s2opc/rpi-build@sha256:fb91901a09c44038d1ec03f71b2412d4b2ebeb3683030cebc191b6bbf3637b4a # digest of rpi-build:1.6
  script:
    - *build_command_line
  variables:
    CMAKE_INSTALL_PREFIX: '../install_rpi'
    CMAKE_TOOLCHAIN_FILE: '/toolchain-rpi.cmake'
    DOCKER_IMAGE: 'sha256:6833a87456545ac3dcfa8a0490a11e20ada97383b3a6768b27f3406940c1b23b'
    BUILD_SHARED_LIBS: 'true'
    BUILD_DIR: build_toolchain
  artifacts:
    name: 'bin-rpi-${CI_COMMIT_REF_SLUG}_${CI_COMMIT_SHA}_job${CI_JOB_ID}'
    paths:
      - '$BUILD_DIR/bin'
      - 'install_rpi/'
    expire_in: '1 month'
  rules:
   - if: "$CROSS_COMPILE != null || $ALL_BUILDS != null || $CI_PIPELINE_SOURCE == 'merge_request_event' || $CI_COMMIT_TAG"
     when: always # run even if previous job in pipeline failed

# Used by coverity, also starts the analysis
build-linux64-coverity:
  <<: *docker_job
  stage: build
  image: registry.gitlab.com/systerel/s2opc/coverity@sha256:e491775733fd5935813ff01dacf7996cc00722e417c597cfa3cd7443074db45e # digest of coverity:1.9
  script: |-
    mkdir build
    cd build
    cmake -DWITH_COVERITY=1 -DCMAKE_BUILD_TYPE=Debug -S2OPC_NODE_MANAGEMENT=1 ..
    /opt/cov-analysis-linux64-2022.12.2/bin/cov-build --dir cov-int make
    tar czf cov-int.tar.gz cov-int
    curl -k --form token=${COVERITY_TOKEN} --form email=${COVERITY_EMAIL} --form version=${CI_COMMIT_REF_SLUG}_${CI_COMMIT_SHA} --form description=${CI_COMMIT_REF_SLUG}_${CI_COMMIT_SHA} --form file=@cov-int.tar.gz https://scan.coverity.com/builds?project=S2OPC
  rules:
    - if: "$WITH_COVERITY != null"

build-zephyr:
  <<: *zephyr_job
  stage: build-others
  image: registry.gitlab.com/systerel/s2opc/zephyr_build:v3.2.0-b@sha256:47d17149f0b1c613cc408101440654403b0fe0bbd394fe0ee48da48b9d093fde # digest of zephyr_build :v3.2.0-b
  script:
    - 'ln -s $(pwd) /zephyrproject/s2opc'
    - 'samples/embedded/platform_dep/zephyr/ci/build-zephyr-samples-docker.sh stm32h735g_disco cli_client'
    - 'samples/embedded/platform_dep/zephyr/ci/build-zephyr-samples-docker.sh mimxrt1064_evk cli_pubsub_server'
    - 'samples/embedded/platform_dep/zephyr/ci/build-zephyr-samples-docker.sh native_posix_64 cli_pubsub_server'
    - 'samples/embedded/platform_dep/zephyr/ci/build-zephyr-samples-docker.sh native_posix_64 cli_client'
  artifacts:
    name: 'bin-zephyr-${CI_COMMIT_REF_SLUG}_${CI_COMMIT_SHA}_job${CI_JOB_ID}'
    paths:
      - 'build_zephyr/'
    expire_in: '1 month'
  rules:
    - if: "$CROSS_COMPILE != null || $ALL_BUILDS != null || $CI_PIPELINE_SOURCE == 'merge_request_event' || $CI_COMMIT_TAG"
      when: always

build-freertos:
  <<: *docker_job
  stage: build-others
  image: registry.gitlab.com/systerel/s2opc/freertos_build:v1.0@sha256:09addc3a3bfcd46ff5581ab21229330fb4cc506c331cf7a31b0a58a0d886de0d # freertos_build:v1.1
  script:
    - 'samples/embedded/platform_dep/freertos/ci/build-freertos-samples-docker.sh'
    - 'test -f build_freertos/freertos-sopc.elf'
    - 'mv build_freertos/freertos-sopc.elf build_freertos/freertos-sopc-stm32h723zg.elf'
    - 'rm -rf /tmp/ws_freertos/build'
    - 'samples/embedded/platform_dep/freertos/ci/build-freertos-samples-docker.sh -- --nocrypto'
    - 'test -f build_freertos/freertos-sopc.elf'
    - 'mv build_freertos/freertos-sopc.elf build_freertos/freertos-sopc-stm32h723zg-nocrypto.elf'
  artifacts:
    name: 'bin-freertos-${CI_COMMIT_REF_SLUG}_${CI_COMMIT_SHA}_job${CI_JOB_ID}'
    paths:
      - 'build_freertos/'
    when: always
    expire_in: '1 month'
  rules:
    - if: "$CROSS_COMPILE != null || $ALL_BUILDS != null || $CI_PIPELINE_SOURCE == 'merge_request_event' || $CI_COMMIT_TAG"
      when: always

###
# Test jobs
###

test-build-from-export:
  <<: *build_linux
  stage: test
  script:
    - 'mkdir -p ${CI_PROJECT_DIR}/samples/ClientServer/build_samples'
    - 'cd ${CI_PROJECT_DIR}/samples/ClientServer/build_samples'
    - 's2opc_DIR=${CI_PROJECT_DIR}/build cmake ..'
    - 'cmake --build .'
    - 'mkdir -p ${CI_PROJECT_DIR}/samples/PubSub/build_samples'
    - 'cd ${CI_PROJECT_DIR}/samples/PubSub/build_samples'
    - 's2opc_DIR=${CI_PROJECT_DIR}/build cmake ..'
    - 'cmake --build .'
    - 'mkdir -p ${CI_PROJECT_DIR}/samples/PubSub_ClientServer/build_samples'
    - 'cd ${CI_PROJECT_DIR}/samples/PubSub_ClientServer/build_samples'
    - 's2opc_DIR=${CI_PROJECT_DIR}/build cmake ..'
    - 'cmake --build .'
    - 'mkdir -p ${CI_PROJECT_DIR}/samples/embedded/build_samples'
    - 'cd ${CI_PROJECT_DIR}/samples/embedded/build_samples'
    - 's2opc_DIR=${CI_PROJECT_DIR}/build cmake ..'
    - 'cmake --build .'
  artifacts:
  rules:
    - if: "$NO_TESTS == null && $WINDOWS_TEST == null && $CROSS_COMPILE == null && \
           $WITH_COVERITY == null && $WITH_COVERAGE == null && $WITH_DOC == null && \
           $S2OPC_PUBSUB_ONLY == null && $S2OPC_CLIENTSERVER_ONLY == null && \
           $ALL_BUILDS == null && $ALL_TESTS == null"
      when: on_success

.test-linux: &test_linux
  <<: *docker_job
  stage: test
# Common rules overwritten by each job using this template
#  rules: # note to be repeated by each child job of *test_linux
#    - if: "$NO_TESTS == null && $WINDOWS_TEST == null && $CROSS_COMPILE == null && \
#           $WITH_COVERITY == null && $WITH_COVERAGE == null"
#      when: on_success

# Test check belongs to the test part, however it does not depend on linux build.
test-check:
  <<: *test_linux
  image: registry.gitlab.com/systerel/s2opc/check@sha256:1458207c7241df9955cd3ec65fc397847fa8ac3122110c4a4b9387843ec1e5a8 # digest of check:1.20
  script:
    - ./.check-code.sh
    # Check generated types are up to date
    - './scripts/gen-sopc-types.py ./schemas/Opc.Ua.Types.bsd'
    - './scripts/generate-embedded-base-type-info.py ./schemas/Opc.Ua.NodeSet2.xml src/Common/opcua_types/sopc_embedded_nodeset2.h'
    - './.format.sh'
    # Check that generated files are up to date
    - '${CI_PROJECT_DIR}/scripts/generate-s2opc-address-space.py ${CI_PROJECT_DIR}/samples/embedded/cli_pubsub_server/xml/pubsub_server.xml ${CI_PROJECT_DIR}/samples/embedded/cli_pubsub_server/src/test_address_space.c --const_addspace'
    - './.verify-no-git-changes.sh'
    # Check generated demo nodesets are up to date
    - 'cd samples/ClientServer/data/address_space && ./generate_demo_nodesets.sh && cd -'
    - './.verify-no-git-changes.sh'
  variables:
      DOCKER_IMAGE: 'sha256:bf7e8accd7bf22c7092fa706bb7662e089e4a0b178908bfc1d13f7094e880b01'
  artifacts:
    name: 'test-check-results-${CI_COMMIT_REF_SLUG}_${CI_COMMIT_SHA}_job${CI_JOB_ID}'
    paths:
      - 'pre-build-check.log'
      - 'clang_tidy.log'
      - 'build-analyzer/analyzer-report'
    when: on_failure
    expire_in: '1 month'
  rules: # repeat .test-linux variables exception since overwritten here
    - if: "$NO_TESTS == null && $WINDOWS_TEST == null && $CROSS_COMPILE == null && \
           $WITH_COVERITY == null && $WITH_COVERAGE == null && $WITH_DOC == null && \
           $ALL_TESTS == null && $ALL_BUILDS == null"
      when: on_success

.test-unit: &test_unit
  <<: *test_linux
  image: registry.gitlab.com/systerel/s2opc/test@sha256:e3c19732d00406b8ae894d2d75f814a17358ff3728a4f9c78343e9a7048a36d5 # digest of test:2.15
  script:
    - './.set-bin-root.sh'
    - './test-all.sh'
  artifacts:
    name: 'test-unit-results-${CI_COMMIT_REF_SLUG}_${CI_COMMIT_SHA}_job${CI_JOB_ID}'
    paths:
      - 'build/bin/**/*.tap'
      - 'build/bin/**/*.log'
      - 'build/tests/**/Testing'
      - 'build/samples/**/Testing'
      - 'build/**/*.*.gcda' # coverage analysis
      - 'build/**/*.*.gcno' # coverage analysis
    when: always
    expire_in: '1 month'
# Common rules defined by test-unit job below

# Test unit for ALL_TESTS variable (add dynamic configuration)
test-unit-all-tests:
  <<: *test_unit
  variables:
    TEST_PASSWORD_PRIVATE_KEY : password
    TEST_PASSWORD_USER : password
  rules:
    - if: "$ALL_TESTS != null"
      when: on_success

# Test unit for NOT ALL_TESTS variable
test-unit:
  <<: *test_unit
  variables:
    <<: *nominal_test_variables
  rules: # repeat .test-linux variables exception since overwritten here
    - if: "$NO_TESTS == null && $WINDOWS_TEST == null && $CROSS_COMPILE == null && \
           $WITH_COVERITY == null && $WITH_DOC == null && \
           $ALL_TESTS == null" # + excludes ALL_TESTS
      when: on_success

.test-uactt: &test_uactt
  <<: *test_linux
  image: com.systerel.fr:5000/c838/uactt-linux@sha256:c876e9998e15e7b2af08a32dbc3e85b6e0304f6f3dd3f8632e00b9271d405e07 # digest of uactt-linux:1.3
  script:
    - 'cd tests/ClientServer/acceptance_tools/ && ./launch_acceptance_tests.sh'
  artifacts:
    name: 'uactt-logs-${CI_COMMIT_REF_SLUG}_${CI_COMMIT_SHA}_job${CI_JOB_ID}'
    paths:
      - 'build/bin/**/*.tap'
      - 'build/bin/**/*.log'
      - 'tests/ClientServer/acceptance_tools/*.log'
      - '**/*.*.gcda' # coverage analysis
      - '**/*.*.gcno' # coverage analysis
    when: always
    expire_in: '1 month'

# Test unit for ALL_TESTS variable (add dynamic configuration)
test-uactt-all-tests:
  <<: *test_uactt
  variables:
    LINUX_UACTT: 1
    TEST_PASSWORD_PRIVATE_KEY : password
  rules:
    - if: "$ALL_TESTS != null && \
           $S2OPC_PUBSUB_ONLY == null && \
           $ALL_BUILDS == null" # + no UACTT tests on PubSub + excludes ALL_BUILDS

# Test unit for NOT ALL_TESTS variable
test-uactt:
  <<: *test_uactt
  variables:
    <<: *nominal_test_variables
    LINUX_UACTT: 1
  rules: # repeat .test-uactt variables exception since overwritten here
    - if: "$NO_TESTS == null && $WINDOWS_TEST == null && $CROSS_COMPILE == null && \
           $WITH_COVERITY == null && $WITH_COVERAGE == null && $WITH_DOC == null && \
           $S2OPC_PUBSUB_ONLY == null && $ALL_BUILDS == null && $ALL_TESTS == null"
           # + no UACTT tests on PubSub + excludes ALL_BUILDS + excludes ALL_TESTS
      when: on_success

###
# Test others jobs
###
test-zephyr:
  <<: *zephyr_job
  stage: test-others
  image: registry.gitlab.com/systerel/s2opc/test@sha256:8367f584bd4e3eeb7735ea9b2c3c5b4ede7198f4eb3ea5729078ed5db4dcae31 # digest of test:2.14
  script:
    - "./samples/embedded/platform_dep/zephyr/ci/test-embedded.sh"
  dependencies:
    - build-zephyr
  variables:
    <<: *nominal_test_variables
  rules: # run the task only if Zephyr samples have been compiled
    - if: "$CROSS_COMPILE != null || $ALL_BUILDS != null || $CI_PIPELINE_SOURCE == 'merge_request_event' || $CI_COMMIT_TAG"
      when: always

##
# Windows native build and tests (done in "build-others" stage)
##

windows-appveyor:
  stage: build-others
  image: cicirello/pyaction@sha256:1e61034d26988094c92b629bf1d5f2027bc0659a347f31653ae405a7b05f97ae # digest of cicirello/pyaction:v4.25.0
  script:
    - 'curl -H "Authorization: Bearer $APPVEYOR_TOKEN" -H "Content-Type: application/json" --request POST -d ''{"accountName" : "Systerel", "projectSlug": "s2opc", "branch": "''$CI_COMMIT_REF_NAME''"}'' https://ci.appveyor.com/api/builds'
  tags:
    - linux
  rules:
    - if: "$ALL_BUILDS != null || $WINDOWS_TEST != null || $CI_COMMIT_TAG || \
           $CI_COMMIT_BRANCH == 'master' && \
           $ALL_TESTS == null && $WITH_COVERITY == null && $WITH_COVERAGE == null && \
           $NO_ASAN == null && $NO_GEN == null && \
           $S2OPC_PUBSUB_ONLY == null && $S2OPC_CLIENTSERVER_ONLY == null" # Avoid to run job on master for all nightly build except ALL_BUILDS
      when: always # run even if previous job in pipeline failed

###
# Analysis jobs
###

coverage-analysis:
  <<: *docker_job
  stage: analyses
  image: registry.gitlab.com/systerel/s2opc/test@sha256:e3c19732d00406b8ae894d2d75f814a17358ff3728a4f9c78343e9a7048a36d5  # digest of test:2.15
  script:
    - ./.gen_coverage.sh
  artifacts:
    name: 'coverage-report-${CI_COMMIT_REF_SLUG}_${CI_COMMIT_SHA}_job${CI_JOB_ID}'
    paths:
      - 'report'
    expire_in: '1 month'
  rules:
    - if: "$WITH_COVERAGE != null"

###
# Documentation generation and publication
###

# The job name must be "pages", and the html must be in "public/" and put in an artifact.
pages:
  <<: *build_linux
  stage: doc
  dependencies: []
  rules:
    - if: "$WITH_DOC != null"
    - if: "$CI_PIPELINE_SOURCE == 'push' && $CI_COMMIT_BRANCH == 'master'"
  variables:
    <<: *build_linux_variables
  script:
    - mkdir $BUILD_DIR
    - cd $BUILD_DIR
    # PyS2OPC relies on subscriptions
    - cmake -DS2OPC_NODE_MANAGEMENT=yes -DWITH_PYS2OPC=yes ..
    - cmake --build . --target doc
    - mv apidoc/html ../public/
  artifacts:
    paths:
    - public
    expire_in: 30 days

check_doc:
  <<: *build_linux
  stage: doc
  script:
    - cd $BUILD_DIR
    - cmake --build . --target doc &> doc.log
    - test $(grep -c 'warning:' doc.log) -eq 0
  variables:
    <<: *build_linux_variables
  artifacts:
    name: 'check_doc-results-${CI_COMMIT_REF_SLUG}_${CI_COMMIT_SHA}_job${CI_JOB_ID}'
    paths:
      - '$BUILD_DIR/doc.log'
    expire_in: '1 month'
    when: on_failure
  rules:
   - if: "$ALL_BUILDS != null || $ALL_TESTS != null || $CI_PIPELINE_SOURCE == 'merge_request_event'"
     when: on_success
