cmake_minimum_required(VERSION 3.5)
project(S2OPC_Common LANGUAGES C)

##                                                ##
#    S2OPC common library contains shared code     #
# between OPC UA client/server and pub/sub modules #
##                                                ##
if(NOT S2OPC_COMMON_DEFS_SET)
  include(../../CommonDefs.cmake)
endif()

### Dependencies ###
include (CheckTypeSize)

if(NOT WITH_CYCLONE_CRYPTO)
  find_package(MBEDTLS REQUIRED)
else()
  find_package(CYCLONE_CRYPTO REQUIRED)
endif()

### Compilation of S2OPC common library source files ###

## Build info source file generation (version, commit checksum, docker id, date) ##
# Define how to generate build info file
set(S2OPC_COMMON_BUILD_INFO_C ${CMAKE_CURRENT_BINARY_DIR}/sopc_common_build_info.c)
s2opc_gen_build_info(${CMAKE_CURRENT_SOURCE_DIR}/configuration/sopc_common_build_info.c_
                     ${S2OPC_COMMON_BUILD_INFO_C})

## Platform dependent source files and library dependencies ##

# Define platform dependent source files and libraries/definitions associated
if(UNIX)
  set(PLATFORM_DIR linux)
  set(THREAD_LIB pthread rt)
  set(MATH_LIB m)
elseif(WIN32)
  set(PLATFORM_DIR windows)
  set(SOCK_LIB ws2_32)
else()
  message(FATAL_ERROR "Unsupported platform: ${CMAKE_SYSTEM_NAME}")
endif()

if(NOT WITH_CYCLONE_CRYPTO)
  set(CRYPTO_LIB mbedtls mbedx509 mbedcrypto)
else()
  set(CRYPTO_LIB cyclone_crypto cyclone_common)
endif()

# Update variable containing S2OPC library dependencies
list(APPEND S2OPC_COMMON_PRIVATE_LINK_LIBRARIES ${CRYPTO_LIB})
list(APPEND S2OPC_COMMON_PUBLIC_LINK_LIBRARIES ${MATH_LIB} ${THREAD_LIB} ${SOCK_LIB})

file(GLOB PLATFORM_SRCS "helpers_platform_dep/*.c" "helpers_platform_dep/${PLATFORM_DIR}/*.c")

# Set specialized compilation flags for platform dependent source files
if(UNIX)
  # add POSIX support
  set_source_files_properties(${PLATFORM_SRCS} PROPERTIES COMPILE_FLAGS "-D_GNU_SOURCE")
elseif(WIN32)
  # minimum Vista for IPV6 support
  if("${CMAKE_C_COMPILER_ID}" STREQUAL "MSVC")
    # TODO: use COMPILE_FLAGS or COMPILE_DEFINITIONS with set_source_files_properties
    add_definitions(/D_WIN32_WINNT=0x0600)
  elseif(MINGW)
    set_source_files_properties(${PLATFORM_SRCS} PROPERTIES COMPILE_FLAGS "-D_WIN32_WINNT=0x0600")
  endif()
endif()

# Add definitions for platform dependant code
check_type_size("time_t" CMAKE_TIME_T_SIZE) # retrieve time_t size
set_source_files_properties(${PLATFORM_SRCS} PROPERTIES COMPILE_DEFINITIONS "SOPC_PTR_SIZE=${CMAKE_SIZEOF_VOID_P};SOPC_TIME_T_SIZE=${CMAKE_TIME_T_SIZE}")

## C99 compliant source code ##

# Define non-platform dependent source files
file(GLOB S2OPC_COMMON_CRYPTO_INTERFACE_SOURCES
    "crypto/*.c")

if(NOT WITH_CYCLONE_CRYPTO)
  file(GLOB S2OPC_COMMON_CRYPTO_SRCS
      "crypto/mbedtls/*.c")
else()
  file(GLOB S2OPC_COMMON_CRYPTO_SRCS
      "crypto/cyclone_crypto/*.c")
endif()

file(GLOB_RECURSE S2OPC_COMMON_SRCS
    "configuration/*.c"
    "helpers/*.c"
    "opcua_types/*.c"
)

set(S2OPC_COMMON_PUBLIC_INCLUDES
    "${CMAKE_CURRENT_SOURCE_DIR}/configuration"
    "${CMAKE_CURRENT_SOURCE_DIR}/helpers"
    "${CMAKE_CURRENT_SOURCE_DIR}/opcua_types"
    "${CMAKE_CURRENT_SOURCE_DIR}/crypto"
    "${CMAKE_CURRENT_SOURCE_DIR}/helpers_platform_dep"
    "${CMAKE_CURRENT_SOURCE_DIR}/helpers_platform_dep/${PLATFORM_DIR}"
    "${PROJECT_BINARY_DIR}"
)
# ${PROJECT_BINARY_DIR} necessary for the s2opc_common_export.h generated by generate_export_header

if(NOT WITH_CYCLONE_CRYPTO)
  set(S2OPC_COMMON_PRIVATE_INCLUDES "crypto/mbedtls")
else()
  set(S2OPC_COMMON_PRIVATE_INCLUDES "crypto/cyclone_crypto")
endif()

### Configure S2OPC library and its properties ###

add_library(s2opc_common ${PLATFORM_SRCS} ${S2OPC_COMMON_SRCS} ${S2OPC_COMMON_CRYPTO_INTERFACE_SOURCES} ${S2OPC_COMMON_CRYPTO_SRCS} ${S2OPC_COMMON_BUILD_INFO_C})
include(GenerateExportHeader)
generate_export_header(s2opc_common)
target_compile_options(s2opc_common PRIVATE ${S2OPC_COMPILER_FLAGS})
target_compile_definitions(s2opc_common PRIVATE ${S2OPC_DEFINITIONS})
target_link_libraries(s2opc_common PUBLIC ${S2OPC_LINKER_FLAGS} ${S2OPC_LINK_LIBRARIES}
                                          ${S2OPC_COMMON_PUBLIC_LINK_LIBRARIES}
                                   PRIVATE ${S2OPC_COMMON_PRIVATE_LINK_LIBRARIES})

target_include_directories(s2opc_common
  PUBLIC
  "$<BUILD_INTERFACE:${S2OPC_COMMON_PUBLIC_INCLUDES}>" # when building (quotes needed to interpret list correclty)
  $<INSTALL_INTERFACE:include/s2opc/common> # when installed
  PRIVATE ${S2OPC_COMMON_PRIVATE_INCLUDES})

# Needed if we want to use the objects in a shared library
set_target_properties(s2opc_common PROPERTIES POSITION_INDEPENDENT_CODE ON)
set_target_properties(s2opc_common PROPERTIES INTERFACE_POSITION_INDEPENDENT_CODE ON)

### Installation and export of S2OPC common library ###
foreach(dir ${S2OPC_COMMON_PUBLIC_INCLUDES})
    file(GLOB temp_files "${dir}/*.h")
    list(APPEND S2OPC_COMMON_INCLUDE_FILES ${temp_files})
endforeach()
# set public header property
set_target_properties(s2opc_common PROPERTIES PUBLIC_HEADER "${S2OPC_COMMON_INCLUDE_FILES}")

install(TARGETS s2opc_common
  EXPORT s2opc_common-export # export our project to be importable after install
  LIBRARY DESTINATION lib
  ARCHIVE DESTINATION lib
  PUBLIC_HEADER DESTINATION include/s2opc/common)

# install the export as a cmake file
install(EXPORT s2opc_common-export
  FILE s2opc_common-export.cmake
  DESTINATION lib/cmake/s2opc)

# export cmake file for use in build tree without install
export(EXPORT s2opc_common-export
  FILE "${CMAKE_BINARY_DIR}/s2opc_common-export.cmake"
  )
